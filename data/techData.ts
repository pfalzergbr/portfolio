import { projects } from './projects';

export interface ProjectSnippet {
  title: string;
  size: string;
  path: string;
  snippet: string;
}

export interface Tech {
  icon: string;
  label: string;
  description?: string;
  projects?: ProjectSnippet[];
}

export const languagesBlock: Tech[] = [
  {
    icon: 'javascript',
    label: 'JavaScript',
    description:
      'One of the most popular programming languages on the web, backbone of my stack, useful on both the front and backend. Recently I favor Typescript for own projects, but writing plenty of javascript.',
    projects: [
      {
        title: 'Tradelog',
        size: 'full',
        path: '#',
        snippet:
          'Full stack application for stock market traders, to track trading results. React front, Node-Express-Postgres backend.',
      },
      {
        title: 'Rewards',
        size: 'full',
        path: '#',
        snippet:
          'Glorified Todo list, where you are rewarded with coins on task completion. You get to spend those on rewarding yourself. React Hooks and Context.',
      },
    ],
  },
  {
    icon: 'typescript',
    label: 'TypeScript',
    description:
      'Superset of JavaScript, making it typesafe, and way more scalable.Since I switched from vanilla, It is definitely my preferred way to write JavaScript code.',
    projects: [
      {
        title: 'VTM - Diceroll Generator',
        size: 'mini',
        path: '#',
        snippet:
          'Complex diceroll generator for the popular gothic role playing game, Vampire the Masquerade. ',
      },
    ],
  },
  {
    icon: 'html',
    label: 'HTML',
    description:
      'Like everyone else on the web, I am using HTML in nearly every projects, in some shape and form. I write a lot of JSX or Vue template, but I have also briefly used server side templating engines as well, like Handlebars, EJS or Pug.',
  },
  {
    icon: 'css',
    label: 'CSS',
    description: `The markup language that makes the web look great, integral part of almost all websites. Although I prefer writing CSS from scratch for educational purposes, I briefly touched on some frameworks as well: Materialize, Material UI and Bootstrap. I especially enjoy writing with Sass syntax, using BEM convention, or css modules for React.`,
  },
];

export const frontendBlock: Tech[] = [
  {
    icon: 'react',
    label: 'React',
    description: `First front-end library I worked with, my primary choice of building full stack web applications, JavaScript or TypeScript. I like extensibility and the massive number of community packages available. 
    Familiar with hooks, context, reducers and Redux integration. I mostly use functional components and hooks syntax myself, but I have no issues working with Class based architecture if necessary.`,
    projects: [
      {
        title: 'Tradelog',
        size: 'full',
        path: '#',
        snippet:
          'Full stack application for stock market traders, to track trading results. React front, Node-Express-Postgres backend.',
      },
      {
        title: 'Rewards',
        size: 'full',
        path: '#',
        snippet:
          'Glorified Todo list, where you are rewarded with coins on task completion. You get to spend those on rewarding yourself. React Hooks and Context.',
      },
    ],
  },
  {
    icon: 'nextjs',
    label: 'Next.js',
    description: `I use Next.js for server side rendered, and statically generated websites with great performance. This portfolio is also a static site, generated by Next.js. `,
    projects: [],
  },
  {
    icon: 'redux',
    label: 'Redux',
    description:
      'State management library, based on functional programming principles. I use it with React in larger projects, where context and hooks are just not enough to keep the architecture clean, or need thunks for complex async code. Familiar with both the full boilerplate, and the leaner toolkit approach.',
    projects: [
      {
        title: 'Tradelog',
        size: 'full',
        path: '#',
        snippet:
          'Full stack application for stock market traders, to track trading results. React front, Node-Express-Postgres backend.',
      },
    ],
  },
  {
    icon: 'vue',
    label: 'Vue',
    description:
      'The second frontend framework I picked up after React, so I can appreciate it both for their merits, and have a better understanding on client side design. Happy to work with both Options or Composition API, familiar with routing, Vuex, and built in test utils. Spent some time with Nuxt.js as well, although I spent more time in the React ecosystem.',
    // projects: []
  },
  // { icon: 'nuxt', label: 'Nuxt.js' },
  {
    icon: 'sass',
    label: 'Sass',
    description:
      'My preferred way of writing more maintainable CSS code, helps structuring my stylesheets better in large projects. I use it mostly integrated into front-end frameworks and libraries.',
    // projects: []
  },
];

export const backendBlock: Tech[] = [
  {
    icon: 'nodejs',
    label: 'Node.js',
    description:
      'Most of my back-end programming experience is building RESTful APIs using the Node.js runtime. Although I have some experience with MVC pattern and server side templating, I tend to separate client and server in my own projects for the single page experience. Very interested in server side architecture going forward.',
    // projects: []
  },

  {
    icon: 'mysql',
    label: 'MySql',
    description:
      'My first encounter with the SQL query language was interacting with MySQL through the command line. Learnt the basics of database design, relations, writing my own queries, using aggregate functions.',
  },
  {
    icon: 'postgres',
    label: 'PostgreSQL',
    description:
      'My go-to SQL flavour for JavaScript based APIs, if my data is highly relational',
  },
  {
    icon: 'mongodb',
    label: 'MongoDb',
    description:
      'Like for many junior developers, my first experience with databases, using mongoDB Atlas. I tend to gravitate towards SQL solutions, especially if my data is highly connected. Aside MQL, also familiar with Mongoose ODM.',
  },

  {
    icon: 'firebase',
    label: 'Firebase',
    description:
      'Very convenient way to get started with full stack. Since I especially enjoy backend development, I tend to build my own, I find firebase a great way to fire up a working project quickly, or attach a backend for an experiment. ',
  },
];

export const databaseBlock: Tech[] = [];

export const otherBlock: Tech[] = [
  {
    icon: 'git',
    label: 'Git',
    description:
      'Version control with Git is part of my regular development workflow, all my own work is committed to my Github repository.',
  },
  // { icon: 'github', label: 'Github' },
  // {
  //   icon: 'docker',
  //   label: 'Docker',
  //   description: 'I mostly develop under subsystem Linux, '
  // },
  {
    icon: 'jest',
    label: 'Jest',
    description:
      'My go to test runner and assertion library for unit and integration tests in javascript, front and backend. I mostly use it in conjunction with React Testing Library or Enzyme on the frontend.',
    // projects: []
  },
  {
    icon: 'figma',
    label: 'Figma',
    description:
      'I am most definitely a developer, not a UX designer. At the same time, Figma makes it really easy to create my own project mockups, and work on my interfaces visually, before I actually code them. My main passion is code, but I spend plenty of time studying UX/UI fundamentals, and incrementally improve my design skills as well.',
  },
];
